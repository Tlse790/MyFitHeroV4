// client/src/data/conversationalFlow.ts
import { ConversationalFlow } from '@/types/conversationalOnboarding';
import { 
  MAIN_OBJECTIVES, 
  AVAILABLE_MODULES, 
  AVAILABLE_SPORTS, 
  DIETARY_PREFERENCES,
  STRENGTH_OBJECTIVES,
  NUTRITION_OBJECTIVES,
  EQUIPMENT_LEVELS,
  SPORT_LEVELS,
  FITNESS_EXPERIENCE_LEVELS
} from './onboardingData';

export const CONVERSATIONAL_ONBOARDING_FLOW: ConversationalFlow = {
  id: 'myfithero_onboarding_v4',
  name: 'MyFitHero - Onboarding Conversationnel',
  description: 'Parcours d\'onboarding personnalis√© et adaptatif',
  estimatedDuration: 15,
  modules: ['sport', 'strength', 'nutrition', 'sleep', 'hydration', 'wellness'],
  initialStep: 'welcome',
  steps: [
    // üöÄ √âTAPE 1: ACCUEIL ET PR√âSENTATION
    {
      id: 'welcome',
      type: 'info',
      title: 'Bienvenue dans MyFitHero ! üéâ',
      subtitle: 'Votre coach personnel IA',
      description: 'Je vais vous accompagner pour cr√©er votre programme personnalis√© en quelques minutes.',
      illustration: 'üèÜ',
      tips: [
        'R√©pondez honn√™tement pour de meilleurs r√©sultats',
        'Vous pouvez modifier vos choix plus tard',
        'Environ 10-15 minutes n√©cessaires'
      ],
      estimatedTime: 1,
      nextStep: 'get_name'
    },

    // üìù √âTAPE 2: COLLECTE DU PR√âNOM
    {
      id: 'get_name',
      type: 'question',
      title: 'Faisons connaissance !',
      question: 'Comment puis-je vous appeler ?',
      description: 'Votre pr√©nom nous aide √† personnaliser votre exp√©rience',
      illustration: 'üëã',
      inputType: 'text',
      validation: [
        { type: 'required', message: 'Veuillez entrer votre pr√©nom' },
        { type: 'min', value: 2, message: 'Votre pr√©nom doit contenir au moins 2 caract√®res' }
      ],
      nextStep: 'main_objective',
      estimatedTime: 1
    },

    // üéØ √âTAPE 3: OBJECTIF PRINCIPAL
    {
      id: 'main_objective',
      type: 'question',
      title: 'Parfait {firstName} ! üåü',
      question: 'Quel est votre objectif principal ?',
      description: 'Cela m\'aidera √† vous proposer les modules les plus adapt√©s',
      illustration: 'üéØ',
      inputType: 'single-select',
      options: MAIN_OBJECTIVES.map(obj => ({
        id: obj.id,
        label: obj.name,
        value: obj.id,
        description: obj.description,
        icon: obj.icon,
        triggers: obj.modules
      })),
      validation: [
        { type: 'required', message: 'Veuillez s√©lectionner votre objectif principal' }
      ],
      nextStep: 'module_selection',
      estimatedTime: 2
    },

    // üì¶ √âTAPE 4: S√âLECTION DES MODULES
    {
      id: 'module_selection',
      type: 'question',
      title: 'Modules recommand√©s pour vous',
      question: 'Quels aspects souhaitez-vous travailler ?',
      description: 'Bas√© sur votre objectif, voici mes recommandations. Vous pouvez ajuster selon vos besoins.',
      illustration: 'üìã',
      inputType: 'multi-select',
      options: AVAILABLE_MODULES.map(module => ({
        id: module.id,
        label: module.name,
        value: module.id,
        description: module.description,
        icon: module.icon,
        color: getModuleColor(module.id)
      })),
      validation: [
        { type: 'required', message: 'Veuillez s√©lectionner au moins un module' }
      ],
      nextStep: 'personal_info',
      estimatedTime: 3
    },

    // üë§ √âTAPE 5: INFORMATIONS PERSONNELLES
    {
      id: 'personal_info',
      type: 'question',
      title: 'Quelques infos sur vous',
      question: 'Parlez-moi de vous pour personnaliser vos programmes',
      description: 'Ces informations sont confidentielles et s√©curis√©es',
      illustration: 'ÔøΩ',
      inputType: 'single-select', // On va g√©rer √ßa comme un formulaire personnalis√©
      options: [
        { id: 'age', label: '√Çge', value: 'age' },
        { id: 'gender', label: 'Genre', value: 'gender' },
        { id: 'lifestyle', label: 'Style de vie', value: 'lifestyle' },
        { id: 'time', label: 'Temps disponible', value: 'time' }
      ],
      nextStep: (_, data) => {
        if (data.selectedModules?.includes('sport')) {
          return 'sport_selection';
        } else if (data.selectedModules?.includes('strength')) {
          return 'strength_setup';
        } else if (data.selectedModules?.includes('nutrition')) {
          return 'nutrition_setup';
        } else if (data.selectedModules?.includes('sleep')) {
          return 'sleep_setup';
        } else if (data.selectedModules?.includes('hydration')) {
          return 'hydration_setup';
        } else {
          return 'wellness_setup';
        }
      },
      estimatedTime: 3
    },

    // üèÉ‚Äç‚ôÇÔ∏è MODULE SPORT
    {
      id: 'sport_selection',
      type: 'question',
      title: 'Votre sport principal',
      question: 'Quel sport pratiquez-vous principalement ?',
      description: 'Cela m\'aidera √† cr√©er des programmes sp√©cifiques',
      illustration: 'üèÉ‚Äç‚ôÇÔ∏è',
      inputType: 'single-select',
      condition: (data) => data.selectedModules?.includes('sport') || false,
      options: AVAILABLE_SPORTS.map(sport => ({
        id: sport.id,
        label: sport.name,
        value: sport.id,
        icon: sport.emoji
      })),
      validation: [
        { type: 'required', message: 'Veuillez s√©lectionner votre sport' }
      ],
      nextStep: 'sport_position',
      estimatedTime: 2
    },

    {
      id: 'sport_position',
      type: 'question',
      title: 'Votre position/sp√©cialit√©',
      question: 'Quelle est votre position ou sp√©cialit√© ?',
      description: 'Pour des programmes encore plus cibl√©s',
      illustration: 'üéØ',
      inputType: 'single-select',
      condition: (data) => !!(data.selectedModules?.includes('sport') && data.sport !== 'other'),
      options: [], // Sera rempli dynamiquement selon le sport
      nextStep: 'sport_level',
      estimatedTime: 1
    },

    {
      id: 'sport_level',
      type: 'question',
      title: 'Votre niveau sportif',
      question: 'Comment d√©cririez-vous votre niveau ?',
      description: 'Soyez honn√™te, cela d√©termine l\'intensit√© de vos programmes',
      illustration: 'üìä',
      inputType: 'single-select',
      condition: (data) => data.selectedModules?.includes('sport') || false,
      options: SPORT_LEVELS.map(level => ({
        id: level.id,
        label: level.name,
        value: level.id,
        description: level.description
      })),
      validation: [
        { type: 'required', message: 'Veuillez s√©lectionner votre niveau' }
      ],
      nextStep: 'sport_equipment',
      estimatedTime: 1
    },

    {
      id: 'sport_equipment',
      type: 'question',
      title: 'Votre √©quipement',
      question: 'Quel √©quipement avez-vous √† disposition ?',
      description: 'Je vais adapter vos programmes selon votre mat√©riel',
      illustration: 'üèãÔ∏è‚Äç‚ôÇÔ∏è',
      inputType: 'single-select',
      condition: (data) => data.selectedModules?.includes('sport') || false,
      options: EQUIPMENT_LEVELS.map(level => ({
        id: level.id,
        label: level.name,
        value: level.id,
        description: level.description
      })),
      validation: [
        { type: 'required', message: 'Veuillez s√©lectionner votre niveau d\'√©quipement' }
      ],
      nextStep: (_, data) => {
        if (data.selectedModules?.includes('strength')) {
          return 'strength_setup';
        } else if (data.selectedModules?.includes('nutrition')) {
          return 'nutrition_setup';
        } else if (data.selectedModules?.includes('sleep')) {
          return 'sleep_setup';
        } else if (data.selectedModules?.includes('hydration')) {
          return 'hydration_setup';
        } else {
          return 'final_questions';
        }
      },
      estimatedTime: 1
    },

    // üí™ MODULE MUSCULATION
    {
      id: 'strength_setup',
      type: 'question',
      title: 'Objectif musculation',
      question: 'Quel est votre objectif principal en musculation ?',
      description: 'Cela d√©terminera le type d\'entra√Ænement que je vous proposerai',
      illustration: 'üí™',
      inputType: 'single-select',
      condition: (data) => data.selectedModules?.includes('strength') || false,
      options: STRENGTH_OBJECTIVES.map(obj => ({
        id: obj.id,
        label: obj.name,
        value: obj.id,
        description: obj.description
      })),
      validation: [
        { type: 'required', message: 'Veuillez s√©lectionner votre objectif' }
      ],
      nextStep: 'strength_experience',
      estimatedTime: 2
    },

    {
      id: 'strength_experience',
      type: 'question',
      title: 'Votre exp√©rience',
      question: 'Depuis combien de temps pratiquez-vous la musculation ?',
      description: 'Cela m\'aide √† ajuster la complexit√© des exercices',
      illustration: 'üìà',
      inputType: 'single-select',
      condition: (data) => data.selectedModules?.includes('strength') || false,
      options: FITNESS_EXPERIENCE_LEVELS.map(level => ({
        id: level.id,
        label: level.name,
        value: level.id,
        description: level.description
      })),
      validation: [
        { type: 'required', message: 'Veuillez s√©lectionner votre niveau d\'exp√©rience' }
      ],
      nextStep: (_, data) => {
        if (data.selectedModules?.includes('nutrition')) {
          return 'nutrition_setup';
        } else if (data.selectedModules?.includes('sleep')) {
          return 'sleep_setup';
        } else if (data.selectedModules?.includes('hydration')) {
          return 'hydration_setup';
        } else {
          return 'final_questions';
        }
      },
      estimatedTime: 1
    },

    // ü•ó MODULE NUTRITION
    {
      id: 'nutrition_setup',
      type: 'question',
      title: 'Vos pr√©f√©rences alimentaires',
      question: 'Quel type d\'alimentation vous correspond ?',
      description: 'Je vais personnaliser vos plans de repas selon vos pr√©f√©rences',
      illustration: 'ü•ó',
      inputType: 'single-select',
      condition: (data) => data.selectedModules?.includes('nutrition') || false,
      options: DIETARY_PREFERENCES.map(pref => ({
        id: pref.id,
        label: pref.name,
        value: pref.id,
        description: pref.description
      })),
      validation: [
        { type: 'required', message: 'Veuillez s√©lectionner votre pr√©f√©rence alimentaire' }
      ],
      nextStep: 'nutrition_objective',
      estimatedTime: 2
    },

    {
      id: 'nutrition_objective',
      type: 'question',
      title: 'Objectif nutritionnel',
      question: 'Que souhaitez-vous atteindre avec la nutrition ?',
      description: 'Cela d√©termine votre approche calorique et macro-nutritionnelle',
      illustration: 'üéØ',
      inputType: 'single-select',
      condition: (data) => data.selectedModules?.includes('nutrition') || false,
      options: NUTRITION_OBJECTIVES.map(obj => ({
        id: obj.id,
        label: obj.name,
        value: obj.id,
        description: obj.description
      })),
      validation: [
        { type: 'required', message: 'Veuillez s√©lectionner votre objectif nutritionnel' }
      ],
      nextStep: (_, data) => {
        if (data.selectedModules?.includes('sleep')) {
          return 'sleep_setup';
        } else if (data.selectedModules?.includes('hydration')) {
          return 'hydration_setup';
        } else {
          return 'final_questions';
        }
      },
      estimatedTime: 1
    },

    // üò¥ MODULE SOMMEIL
    {
      id: 'sleep_setup',
      type: 'question',
      title: 'Vos habitudes de sommeil',
      question: 'Combien d\'heures dormez-vous en moyenne par nuit ?',
      description: 'Le sommeil est crucial pour votre r√©cup√©ration et vos performances',
      illustration: 'üò¥',
      inputType: 'slider',
      condition: (data) => data.selectedModules?.includes('sleep') || false,
      validation: [
        { type: 'required', message: 'Veuillez indiquer votre dur√©e de sommeil' },
        { type: 'min', value: 4, message: 'Dur√©e minimum: 4 heures' },
        { type: 'max', value: 12, message: 'Dur√©e maximum: 12 heures' }
      ],
      nextStep: 'sleep_difficulties',
      estimatedTime: 1
    },

    {
      id: 'sleep_difficulties',
      type: 'question',
      title: 'Qualit√© du sommeil',
      question: 'Rencontrez-vous des difficult√©s pour dormir ?',
      description: 'Je peux vous proposer des conseils pour am√©liorer votre sommeil',
      illustration: 'üåô',
      inputType: 'toggle',
      condition: (data) => data.selectedModules?.includes('sleep') || false,
      nextStep: (_, data) => {
        if (data.selectedModules?.includes('hydration')) {
          return 'hydration_setup';
        } else {
          return 'final_questions';
        }
      },
      estimatedTime: 1
    },

    // üíß MODULE HYDRATATION
    {
      id: 'hydration_setup',
      type: 'question',
      title: 'Votre hydratation',
      question: 'Quel est votre objectif d\'hydratation quotidien ?',
      description: 'Une bonne hydratation am√©liore vos performances et votre r√©cup√©ration',
      illustration: 'üíß',
      inputType: 'slider',
      condition: (data) => data.selectedModules?.includes('hydration') || false,
      validation: [
        { type: 'required', message: 'Veuillez d√©finir votre objectif d\'hydratation' },
        { type: 'min', value: 1, message: 'Minimum: 1 litre par jour' },
        { type: 'max', value: 5, message: 'Maximum: 5 litres par jour' }
      ],
      nextStep: 'hydration_reminders',
      estimatedTime: 1
    },

    {
      id: 'hydration_reminders',
      type: 'question',
      title: 'Rappels d\'hydratation',
      question: 'Souhaitez-vous recevoir des rappels pour boire ?',
      description: 'Je peux vous envoyer des notifications intelligentes',
      illustration: 'üîî',
      inputType: 'toggle',
      condition: (data) => data.selectedModules?.includes('hydration') || false,
      nextStep: 'final_questions',
      estimatedTime: 1
    },

    // üìù QUESTIONS FINALES
    {
      id: 'final_questions',
      type: 'question',
      title: 'Derni√®res questions',
      question: 'Partagez votre motivation principale',
      description: 'Qu\'est-ce qui vous motive le plus dans cette d√©marche ?',
      illustration: 'üî•',
      inputType: 'text',
      validation: [
        { type: 'required', message: 'Veuillez partager votre motivation' }
      ],
      nextStep: 'privacy_consent',
      estimatedTime: 2
    },

    // üîí CONSENTEMENTS
    {
      id: 'privacy_consent',
      type: 'question',
      title: 'Confidentialit√© et consentements',
      question: 'Acceptez-vous nos conditions d\'utilisation ?',
      description: 'Vos donn√©es sont s√©curis√©es et ne sont jamais vendues',
      illustration: 'üîí',
      inputType: 'toggle',
      validation: [
        { type: 'required', message: 'Vous devez accepter les conditions pour continuer' }
      ],
      nextStep: 'summary',
      estimatedTime: 1
    },

    // üìã R√âSUM√â FINAL
    {
      id: 'summary',
      type: 'summary',
      title: 'Votre profil est pr√™t ! üéâ',
      description: 'Voici un r√©sum√© de votre configuration',
      illustration: '‚ú®',
      nextStep: 'completion',
      estimatedTime: 2
    },

    // ‚úÖ FINALISATION
    {
      id: 'completion',
      type: 'confirmation',
      title: 'Bienvenue dans MyFitHero !',
      description: 'Votre parcours personnalis√© vous attend',
      illustration: 'üöÄ',
      estimatedTime: 1
    }
  ]
};

// Fonction utilitaire pour les couleurs des modules
function getModuleColor(moduleId: string): string {
  const colors: Record<string, string> = {
    sport: '#3B82F6',
    strength: '#EF4444',
    nutrition: '#10B981',
    sleep: '#8B5CF6',
    hydration: '#06B6D4',
    wellness: '#F59E0B'
  };
  return colors[moduleId] || '#6B7280';
}

// Fonction pour obtenir les prochaines √©tapes selon les modules s√©lectionn√©s
export function getNextStepForModules(selectedModules: string[], currentModule?: string): string {
  const moduleOrder = ['sport', 'strength', 'nutrition', 'sleep', 'hydration', 'wellness'];
  
  if (!currentModule) {
    // Trouve le premier module s√©lectionn√©
    for (const module of moduleOrder) {
      if (selectedModules.includes(module)) {
        return `${module}_setup`;
      }
    }
    return 'final_questions';
  }
  
  // Trouve le prochain module s√©lectionn√©
  const currentIndex = moduleOrder.indexOf(currentModule);
  for (let i = currentIndex + 1; i < moduleOrder.length; i++) {
    if (selectedModules.includes(moduleOrder[i])) {
      return `${moduleOrder[i]}_setup`;
    }
  }
  
  return 'final_questions';
}

// Fonction pour calculer le temps estim√© selon les modules s√©lectionn√©s
export function calculateEstimatedTime(selectedModules: string[]): number {
  const baseTime = 5; // Minutes pour les √©tapes de base
  const moduleTime: Record<string, number> = {
    sport: 4,
    strength: 2,
    nutrition: 3,
    sleep: 2,
    hydration: 2,
    wellness: 2
  };
  
  let totalTime = baseTime;
  selectedModules.forEach(module => {
    totalTime += moduleTime[module] || 0;
  });
  
  return totalTime;
}
